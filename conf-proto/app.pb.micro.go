// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: app.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golango.cn/golden-conf/conf-proto/common"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AppServer service

func NewAppServerEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AppServer service

type AppServerService interface {
	GetApp(ctx context.Context, in *GetAppRequ, opts ...client.CallOption) (*GetAppResp, error)
	GetApps(ctx context.Context, in *GetAppsRequ, opts ...client.CallOption) (*GetAppsResp, error)
	CreateApp(ctx context.Context, in *CreateAppRequ, opts ...client.CallOption) (*CreateAppResp, error)
}

type appServerService struct {
	c    client.Client
	name string
}

func NewAppServerService(name string, c client.Client) AppServerService {
	return &appServerService{
		c:    c,
		name: name,
	}
}

func (c *appServerService) GetApp(ctx context.Context, in *GetAppRequ, opts ...client.CallOption) (*GetAppResp, error) {
	req := c.c.NewRequest(c.name, "AppServer.GetApp", in)
	out := new(GetAppResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServerService) GetApps(ctx context.Context, in *GetAppsRequ, opts ...client.CallOption) (*GetAppsResp, error) {
	req := c.c.NewRequest(c.name, "AppServer.GetApps", in)
	out := new(GetAppsResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServerService) CreateApp(ctx context.Context, in *CreateAppRequ, opts ...client.CallOption) (*CreateAppResp, error) {
	req := c.c.NewRequest(c.name, "AppServer.CreateApp", in)
	out := new(CreateAppResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AppServer service

type AppServerHandler interface {
	GetApp(context.Context, *GetAppRequ, *GetAppResp) error
	GetApps(context.Context, *GetAppsRequ, *GetAppsResp) error
	CreateApp(context.Context, *CreateAppRequ, *CreateAppResp) error
}

func RegisterAppServerHandler(s server.Server, hdlr AppServerHandler, opts ...server.HandlerOption) error {
	type appServer interface {
		GetApp(ctx context.Context, in *GetAppRequ, out *GetAppResp) error
		GetApps(ctx context.Context, in *GetAppsRequ, out *GetAppsResp) error
		CreateApp(ctx context.Context, in *CreateAppRequ, out *CreateAppResp) error
	}
	type AppServer struct {
		appServer
	}
	h := &appServerHandler{hdlr}
	return s.Handle(s.NewHandler(&AppServer{h}, opts...))
}

type appServerHandler struct {
	AppServerHandler
}

func (h *appServerHandler) GetApp(ctx context.Context, in *GetAppRequ, out *GetAppResp) error {
	return h.AppServerHandler.GetApp(ctx, in, out)
}

func (h *appServerHandler) GetApps(ctx context.Context, in *GetAppsRequ, out *GetAppsResp) error {
	return h.AppServerHandler.GetApps(ctx, in, out)
}

func (h *appServerHandler) CreateApp(ctx context.Context, in *CreateAppRequ, out *CreateAppResp) error {
	return h.AppServerHandler.CreateApp(ctx, in, out)
}
